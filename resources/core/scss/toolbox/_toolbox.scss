// sass-lint:disable-all
@import 'node_modules/breakpoint-sass/stylesheets/breakpoint';

$browser-context: 16 !default;

%fix-first-item {
    & > :first-child {
        margin-top: 0;
    }
}
%fix-last-item {
    & > :last-child {
        margin-bottom: 0;
    }
}
%fix-padding {
    @extend %fix-first-item;
    @extend %fix-last-item;
}
@mixin fixPadding() {
    @extend %fix-first-item;
    @extend %fix-last-item;
}
@mixin fixFloat {
    &:after {
        content: '.';
        display: block;
        height: 0;
        font-size: 0;
        clear: both;
        visibility: hidden;
    }
}
@mixin animate {
    transition: all 0.4s ease-in-out;
}
@mixin animateProperty($property: all, $time: 0.4) {
    transition: $property ($time) + s ease-in-out;
}
@mixin animatePropertyDelay($property: all, $time: 0.4, $delay: 0.2) {
    transition: $property ($time) + s ease-in-out ($delay) + s;
}
@mixin word-wrap() {
    word-break: break-word;
    hyphens: auto;
}
@mixin ellipsis() {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
}
//calculete percentage numbers
@function calc-percent($target, $container) {
    @return ($target / $container) * 100%;
}
//short version of calc-percent
@function cp($target, $container) {
    @return calc-percent($target, $container);
}
// transform pixels in ems (with or without px in the end). Usage: em(12px) or em(12)
@function em($pixels, $context: $browser-context) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (unitless($context)) {
        $context: $context * 1px;
    }

    @return $pixels / $context * 1em;
}
// media queries
@mixin bp($point) {
    @if $point == sm {
        @include breakpoint($sm) {
            @content;
        }
    } @else if $point == smd {
        @include breakpoint($smd) {
            @content;
        }
    } @else if $point == md {
        @include breakpoint($md) {
            @content;
        }
    } @else if $point == xmd {
        @include breakpoint($xmd) {
            @content;
        }
    } @else if $point == lg {
        @include breakpoint($lg) {
            @content;
        }
    } @else if $point == xlg {
        @include breakpoint($xlg) {
            @content;
        }
    } @else if $point == xxlg {
        @include breakpoint($xxlg) {
            @content;
        }
    } @else if $point == xxxlg {
        @include breakpoint($xxxlg) {
            @content;
        }
    } @else if $point == wide {
        @include breakpoint($wide) {
            @content;
        }
    } @else if $point == largest {
        @include breakpoint($largest) {
            @content;
        }
    } @else if $point == short {
        @include breakpoint($short) {
            @content;
        }
    } @else if $point == retina {
        @media only screen and (-webkit-min-device-pixel-ratio: 2),
            only screen and (min--moz-device-pixel-ratio: 2),
            only screen and (-o-min-device-pixel-ratio: 2/1),
            only screen and (min-device-pixel-ratio: 2),
            only screen and (min-resolution: 192dpi),
            only screen and (min-resolution: 2dppx) {
            @content;
        }
    } @else {
        @include breakpoint(em($point)) {
            @content;
        }
    }
}
@function image-url($image-name) {
    @return url($imagePath+$image-name);
}
// TODO: implement with a default body font size
@function rem-calc($size) {
    $remSize: $size / 16;
    @return #{$remSize}rem;
}
@function rc($size) {
    @return rem-calc($size);
}
@function focusOutline($color: $black, $pos: inset) {
    @return $pos 0 0 0 2px $color;
}
